@host=http://localhost:8080
{{
	exports.options   = ["tomorrow", "future"];
	exports.tags      = ["hello", "world"];
	exports.tomorrow  = (d => new Date(d.setDate(d.getDate()+1)))(new Date).toISOString().slice(0, 10);
	exports.future    = (d => new Date(d.setDate(d.getDate()+2)))(new Date).toISOString().slice(0, 10);
	exports.today     = new Date().toISOString().slice(0, 10);
	exports.yesterday = (d => new Date(d.setDate(d.getDate()-1)))(new Date).toISOString().slice(0, 10);
	exports.late      = (d => new Date(d.setDate(d.getDate()-2)))(new Date).toISOString().slice(0, 10);
}}
###
GET /api/404
{{
	test.status(404);
}}
###
GET /api/options
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, {
			anytime   : "ON",
			tomorrow  : "ON",
			future    : "ON",
			today     : "ON",
			yesterday : "ON",
			late      : "ON",
			tag       :  "1",
			version   :  "1",
		});
	});
}}
###
POST /api/options
Content-Type: application/json
{"option": "version", "value": "2"}

{{
	test.status(400);
}}
###
POST /api/options
Content-Type: apllication/json
{"option":"tag","value":-1}

{{
	test.status(400)
}}
###
POST /api/options
Content-Type: apllication/json
{"option":"tag","value":0}

{{
	test.status(400)
}}
###
POST /api/options
Content-Type: apllication/json
{"option":"tag","value":3}

{{
	test.status(400)
}}
###
# @loop for option of options
POST /api/options
Content-Type: application/json
{"option": "{{option}}", "value": "OFF"}

{{
	test.status(200);
}}
###
GET /api/options
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, {
			anytime   : "ON",
			tomorrow  : "OFF",
			future    : "OFF",
			today     : "ON",
			yesterday : "ON",
			late      : "ON",
			tag       :  "1",
			version   :  "1",
		});
	});
}}
###
GET /api/tags
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, []);
	});
}}
###
GET /api/tags/1
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, [{id: 1, name: "Dom"}]);
	});
}}
###
GET /api/tags/39
{{
	test.status(404);
}}
###
POST /api/tags
Content-Type: application/json
{{
	test.status(400);
}}
###
POST /api/tags
Content-Type: application/json
{"name": "name", "test": "test"}

{{
	test.status(400);
}}
###
POST /api/tags
Content-Type: application/json
{"name": "name"}

{{
	test.status(200);
}}
###
POST /api/tags/39
Content-Type: application/json
{"name": "test"}

{{
	test.status(200);
}}
###
# @loop for tag of tags
POST /api/tags
Content-Type: application/json
{"name": "{{tag}}"}
###
GET /api/tags
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, [
			{id: 40, name: "hello"},
			{id: 39, name: "test"},
			{id: 41, name: "world"},
		]);
	});
}}
###
DELETE /api/tags/1
{{
	test.status(400);
}}
###
DELETE /api/tags/39
{{
	test.status(200);
}}
###
GET /api/tags
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, [
			{id: 40, name: "hello"},
			{id: 41, name: "world"},
		]);
	});
}}
###
GET /api/tasks
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, []);
	});
}}
###
POST /api/tasks
Content-Type: application/json
{"date":"2021-01-01"}

{{
	test.status(400);
}}
###
POST /api/tasks
Content-Type: application/json
{"name":"hello","date":"date"}

{{
	test.status(400);
}}
###
POST /api/tasks
Content-Type: application/json
{"name":"hello","date":"2021-01-01","recurrent":0}

{{
	test.status(400);
}}
###
GET /api/tags/task/1
{{
	test.status(400);
}}
###
POST /api/tasks
Content-Type: apllication/json
{"name":"hello","date":"2021-01-01","recurrent":1}

{{
	test.status(200);
}}
###
GET /api/tags/task/1
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, []);
	});
}}
###
POST /api/tags/task/1
Content-Type: apllication/json
[40]

{{
	test.status(200);
}}
###
POST /api/tags/task/1
Content-Type: apllication/json
[40]

{{
	test.status(400);
}}
###
GET /api/tasks
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, [
			{id: 1, name: "hello", date: "2021-01-01", "comment": "", recurrent: 1, tags: [40]}
		]);
	});
}}
###
POST /api/options
Content-Type: apllication/json
{"option":"tag","value":2}
###
GET /api/tasks
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, []);
	});
}}
###
POST /api/options
Content-Type: apllication/json
{"option":"tag","value":3}
###
GET /api/tasks
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, [
			{id: 1, name: "hello", date: "2021-01-01", "comment": "", recurrent: 1, tags: [40]}
		]);
	});
}}
###
POST /api/options
Content-Type: apllication/json
{"option":"tag","value":4}
###
GET /api/tasks
{{
	test.status(200);
	const assert = require("assert");
	test("response body equals expected", () => {
		assert.deepEqual(response.parsedBody, []);
	});
}}
